

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                                           Tue Jan 21 12:25:39 2025


     1                           	processor	10F200
     2                           	pagewidth 132
     3                           	psect	udata,global,class=RAM,space=1,delta=1,noexec
     4                           	psect	udata_bank0,global,class=BANK0,space=1,delta=1,noexec
     5                           	psect	code,global,class=CODE,space=0,delta=2
     6                           	psect	data,global,class=STRCODE,space=0,delta=2,noexec
     7                           	psect	rstVector,global,space=0,delta=2
     8                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
     9                           
    10                           ; CONFIG
    11 ;;; - triple ;;; = my own comments
    12 ;;;;;;;;;;;;;;;
    13                           ; inc files:
    14                           ; C:\Program Files\Microchip\xc8\v2.32\pic\include
    15      000                     INDF            equ	0
    16      000                     INDF_INDF_POSN  equ	0
    17      000                     INDF_INDF_POSITION equ	0
    18      008                     INDF_INDF_SIZE  equ	8
    19      008                     INDF_INDF_LENGTH equ	8
    20      0FF                     INDF_INDF_MASK  equ	255
    21      001                     TMR0            equ	1
    22      000                     TMR0_TMR0_POSN  equ	0
    23      000                     TMR0_TMR0_POSITION equ	0
    24      008                     TMR0_TMR0_SIZE  equ	8
    25      008                     TMR0_TMR0_LENGTH equ	8
    26      0FF                     TMR0_TMR0_MASK  equ	255
    27      002                     PCL             equ	2
    28      000                     PCL_PCL_POSN    equ	0
    29      000                     PCL_PCL_POSITION equ	0
    30      008                     PCL_PCL_SIZE    equ	8
    31      008                     PCL_PCL_LENGTH  equ	8
    32      0FF                     PCL_PCL_MASK    equ	255
    33      003                     STATUS          equ	3
    34      000                     STATUS_C_POSN   equ	0
    35      000                     STATUS_C_POSITION equ	0
    36      001                     STATUS_C_SIZE   equ	1
    37      001                     STATUS_C_LENGTH equ	1
    38      001                     STATUS_C_MASK   equ	1
    39      001                     STATUS_DC_POSN  equ	1
    40      001                     STATUS_DC_POSITION equ	1
    41      001                     STATUS_DC_SIZE  equ	1
    42      001                     STATUS_DC_LENGTH equ	1
    43      002                     STATUS_DC_MASK  equ	2
    44      002                     STATUS_Z_POSN   equ	2
    45      002                     STATUS_Z_POSITION equ	2
    46      001                     STATUS_Z_SIZE   equ	1
    47      001                     STATUS_Z_LENGTH equ	1
    48      004                     STATUS_Z_MASK   equ	4
    49      003                     STATUS_nPD_POSN equ	3
    50      003                     STATUS_nPD_POSITION equ	3
    51      001                     STATUS_nPD_SIZE equ	1
    52      001                     STATUS_nPD_LENGTH equ	1
    53      008                     STATUS_nPD_MASK equ	8
    54      004                     STATUS_nTO_POSN equ	4
    55      004                     STATUS_nTO_POSITION equ	4
    56      001                     STATUS_nTO_SIZE equ	1
    57      001                     STATUS_nTO_LENGTH equ	1
    58      010                     STATUS_nTO_MASK equ	16
    59      007                     STATUS_GPWUF_POSN equ	7
    60      007                     STATUS_GPWUF_POSITION equ	7
    61      001                     STATUS_GPWUF_SIZE equ	1
    62      001                     STATUS_GPWUF_LENGTH equ	1
    63      080                     STATUS_GPWUF_MASK equ	128
    64      000                     STATUS_CARRY_POSN equ	0
    65      000                     STATUS_CARRY_POSITION equ	0
    66      001                     STATUS_CARRY_SIZE equ	1
    67      001                     STATUS_CARRY_LENGTH equ	1
    68      001                     STATUS_CARRY_MASK equ	1
    69      002                     STATUS_ZERO_POSN equ	2
    70      002                     STATUS_ZERO_POSITION equ	2
    71      001                     STATUS_ZERO_SIZE equ	1
    72      001                     STATUS_ZERO_LENGTH equ	1
    73      004                     STATUS_ZERO_MASK equ	4
    74      004                     FSR             equ	4
    75      000                     FSR_FSR_POSN    equ	0
    76      000                     FSR_FSR_POSITION equ	0
    77      008                     FSR_FSR_SIZE    equ	8
    78      008                     FSR_FSR_LENGTH  equ	8
    79      0FF                     FSR_FSR_MASK    equ	255
    80      005                     OSCCAL          equ	5
    81      000                     OSCCAL_FOSC4_POSN equ	0
    82      000                     OSCCAL_FOSC4_POSITION equ	0
    83      001                     OSCCAL_FOSC4_SIZE equ	1
    84      001                     OSCCAL_FOSC4_LENGTH equ	1
    85      001                     OSCCAL_FOSC4_MASK equ	1
    86      001                     OSCCAL_CAL_POSN equ	1
    87      001                     OSCCAL_CAL_POSITION equ	1
    88      007                     OSCCAL_CAL_SIZE equ	7
    89      007                     OSCCAL_CAL_LENGTH equ	7
    90      0FE                     OSCCAL_CAL_MASK equ	254
    91      001                     OSCCAL_CAL0_POSN equ	1
    92      001                     OSCCAL_CAL0_POSITION equ	1
    93      001                     OSCCAL_CAL0_SIZE equ	1
    94      001                     OSCCAL_CAL0_LENGTH equ	1
    95      002                     OSCCAL_CAL0_MASK equ	2
    96      002                     OSCCAL_CAL1_POSN equ	2
    97      002                     OSCCAL_CAL1_POSITION equ	2
    98      001                     OSCCAL_CAL1_SIZE equ	1
    99      001                     OSCCAL_CAL1_LENGTH equ	1
   100      004                     OSCCAL_CAL1_MASK equ	4
   101      003                     OSCCAL_CAL2_POSN equ	3
   102      003                     OSCCAL_CAL2_POSITION equ	3
   103      001                     OSCCAL_CAL2_SIZE equ	1
   104      001                     OSCCAL_CAL2_LENGTH equ	1
   105      008                     OSCCAL_CAL2_MASK equ	8
   106      004                     OSCCAL_CAL3_POSN equ	4
   107      004                     OSCCAL_CAL3_POSITION equ	4
   108      001                     OSCCAL_CAL3_SIZE equ	1
   109      001                     OSCCAL_CAL3_LENGTH equ	1
   110      010                     OSCCAL_CAL3_MASK equ	16
   111      005                     OSCCAL_CAL4_POSN equ	5
   112      005                     OSCCAL_CAL4_POSITION equ	5
   113      001                     OSCCAL_CAL4_SIZE equ	1
   114      001                     OSCCAL_CAL4_LENGTH equ	1
   115      020                     OSCCAL_CAL4_MASK equ	32
   116      006                     OSCCAL_CAL5_POSN equ	6
   117      006                     OSCCAL_CAL5_POSITION equ	6
   118      001                     OSCCAL_CAL5_SIZE equ	1
   119      001                     OSCCAL_CAL5_LENGTH equ	1
   120      040                     OSCCAL_CAL5_MASK equ	64
   121      007                     OSCCAL_CAL6_POSN equ	7
   122      007                     OSCCAL_CAL6_POSITION equ	7
   123      001                     OSCCAL_CAL6_SIZE equ	1
   124      001                     OSCCAL_CAL6_LENGTH equ	1
   125      080                     OSCCAL_CAL6_MASK equ	128
   126      006                     GPIO            equ	6
   127      000                     GPIO_GP0_POSN   equ	0
   128      000                     GPIO_GP0_POSITION equ	0
   129      001                     GPIO_GP0_SIZE   equ	1
   130      001                     GPIO_GP0_LENGTH equ	1
   131      001                     GPIO_GP0_MASK   equ	1
   132      001                     GPIO_GP1_POSN   equ	1
   133      001                     GPIO_GP1_POSITION equ	1
   134      001                     GPIO_GP1_SIZE   equ	1
   135      001                     GPIO_GP1_LENGTH equ	1
   136      002                     GPIO_GP1_MASK   equ	2
   137      002                     GPIO_GP2_POSN   equ	2
   138      002                     GPIO_GP2_POSITION equ	2
   139      001                     GPIO_GP2_SIZE   equ	1
   140      001                     GPIO_GP2_LENGTH equ	1
   141      004                     GPIO_GP2_MASK   equ	4
   142      003                     GPIO_GP3_POSN   equ	3
   143      003                     GPIO_GP3_POSITION equ	3
   144      001                     GPIO_GP3_SIZE   equ	1
   145      001                     GPIO_GP3_LENGTH equ	1
   146      008                     GPIO_GP3_MASK   equ	8
   147                           
   148                           	psect	code
   149      002                     main:
   150                           
   151 ;;; Timer0 Clock Source Select (page 16) bit gets cleared in OPTION_REG (page 23)
   152                           ; clear T0CS bit of OPTION reg to enable it as a GPIO
   153      002  0CD1               	movlw	209
   154                           
   155 ;;; load option register (page 46)
   156      003  0002               	option
   157                           
   158                           ; init gpio
   159 ;;; (page 33 in PIC12F683) indicates that GPIO is an 6-bit wide, bidirectional port.
   160 ;;; (page 20 in PIC10F200) indicates that GPIO is an 8-bit I/O register where only the lower 4 bits are used.
   161 ;;; change from 0b111000 > 0b00000000 (weak pull up is always on so pulling low will enable?).
   162      004  0C40               	movlw	64	; 0, 1, and 2 are outputs
   163      005  0006               	tris	6
   164      006  0A07               	goto	main_loop
   165      007                     main_loop:	
   166                           ; general purpose registers 0x10 - 0x1Fh
   167                           
   168      007  0526               	bsf	6,1
   169      008  0CFF               	movlw	255	;255
   170      009  0030               	movwf	16	;load value into general purpose register (RAM)
   171      00A  0CFF               	movlw	255
   172      00B  0031               	movwf	17
   173      00C  0914               	call	outer_loop
   174      00D  0426               	bcf	6,1
   175      00E  0CFF               	movlw	255
   176      00F  0030               	movwf	16
   177      010  0CFF               	movlw	255
   178      011  0031               	movwf	17
   179      012  0914               	call	outer_loop
   180      013  0A07               	goto	main_loop
   181      014                     outer_loop:
   182      014  0918               	call	inner_loop
   183      015  02F0               	decfsz	16,f
   184      016  0A14               	goto	outer_loop
   185      017  0800               	retlw	0
   186      018                     inner_loop:
   187      018  02F1               	decfsz	17,f
   188      019  0A18               	goto	inner_loop
   189      01A  0800               	retlw	0
   190                           
   191                           	psect	data
   192      000                     stk_offset      set	0
   193      000                     auto_size       set	0
   194                           
   195                           ; stack_auto defines a symbol /name/_offset which equates to the
   196                           ; stack offset of the auto object in question
   197      000                     
   198                           ; stack_param defines a symbol /name/_offset which equates to the
   199                           ; stack offset of the parameter object in question
   200      000                     
   201                           ; alloc_stack adjusts the SP to allocate space for auto objects
   202                           ; it also links in to the btemp symbol so that can be used
   203      000                     
   204                           ; restore_stack adjusts the SP to remove all auto and parameter
   205                           ; objects from the stack prior to returning from a function
   206      000                     	; ((GPIO) and 01Fh), 3/MCLR Pin Function Select bit (((GPIO) and 01Fh), 3/MCLR pin function is MCLR
      +                          )
   207                           
   208                           	psect	rstVector
   209      000                     reset_vector:	
   210                           ; CONFIG WDT = OFF ; Watchdog Timer Enable bit (WDT disabled)
   211                           ; User guide chapter 4.2: delta means 2 bytes per memory address (14 bit opcodes for PIC12F683)
   212                           ; this psect just holds the reset vector
   213 ;;; PIC10F200 has 12 bit opcodes, should still be 2 bytes per memory address
   214                           
   215      000  0A02               	goto	main
   216                           
   217                           	psect	config
   218                           
   219                           ;Config register CONFIG @ 0xFFF
   220                           ;	Oscillator
   221                           ;	OSC = IntRC, This is the only option. It is here for backward compatibility
   222                           ;	Watchdog Timer
   223                           ;	WDTE = 0x1, unprogrammed default
   224                           ;	Code Protect
   225                           ;	CP = OFF, Code protection off
   226                           ;	Master Clear Enable
   227                           ;	MCLRE = OFF, GP3/MCLR pin fuction is digital I/O, MCLR internally tied to VDD
   228      FFF                     	org	4095
   229      FFF  0FEF               	dw	4079


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                               Tue Jan 21 12:25:39 2025

                 GPIO 0006                   main 0002           reset_vector 0000             inner_loop 0018  
            main_loop 0007             outer_loop 0014  
